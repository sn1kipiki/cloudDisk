{"ast":null,"code":"import * as THREE from 'three';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <${parseInt(THREE.REVISION.replace(/\\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n      }`\n    });\n  }\n}\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    depthWrite: false,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["THREE","Color","AdditiveBlending","ShaderMaterial","Vector3","Spherical","React","useFrame","StarfieldMaterial","constructor","uniforms","time","value","fade","vertexShader","fragmentShader","parseInt","REVISION","replace","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","radius","depth","count","saturation","factor","speed","ref","material","useRef","position","color","size","useMemo","positions","colors","sizes","Array","from","length","increment","i","push","toArray","setHSL","g","b","Float32Array","state","current","clock","getElapsedTime","starfieldMaterial","useState","createElement","attach","args","object","blending","depthWrite","transparent","vertexColors"],"sources":["C:/Users/SystemX/Desktop/prj/cloudDisk/client/node_modules/@react-three/drei/core/Stars.js"],"sourcesContent":["import * as THREE from 'three';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <${parseInt(THREE.REVISION.replace(/\\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    depthWrite: false,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}